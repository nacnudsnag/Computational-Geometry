#include "geom.h"

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <assert.h>
#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

point2D pIntersect(point2D a, point2D b, point2D c, point2D d);
					 

double dist(point2D a, point2D b)
{       
	//Computes distance between Points
        return sqrt(pow(a.x - b.x, 2) + pow(a.y - b.y, 2));
}

int signed_area2D(point2D a, point2D b, point2D c) {
    //return ((b.x - a.x)*(c.y - a.y) - (b.y - a.y)*(c.x - a.x));
    return ((a.x-c.x)*(b.y-c.y) - (b.x-c.x) * (a.y-c.y));
}

/* **************************************** */
/* return 1 if p,q,r collinear, and 0 otherwise */
int collinear(point2D p, point2D q, point2D r) {
    if (signed_area2D(p, q, r) ==0)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
//Function that takes a robot and a line, and sees if the robot intersects with the line
//Returns 1 if there is an intersection, and a 0 if no intersections
int robotAndLine(lineSegment2D line, robot robit)
{
	if (pIntersect(line.p1, line.p2, robit.a, robit.b).x != -1)
	{
		return 1;
	}
	if (pIntersect(line.p1, line.p2, robit.b, robit.c).x != -1)
        {
                return 1;
        }
	if (pIntersect(line.p1, line.p2, robit.c, robit.d).x != -1)
        {
                return 1;
        }
	if (pIntersect(line.p1, line.p2, robit.d, robit.a).x != -1)
        {
                return 1;
        }
	return 0;
}
//function that takes a robot struct and deteremines if a robot fits at a particular coordinate
//returns an int: 1 if the robot fits, 0 if it does not fit
int checkFit(vector<vector<lineSegment2D> > polySegs, robot robit) 
{
	for (int i = 0; i < polySegs.size(); ++i)
	{
		for (int j = 0; j < polySegs[i].size(); ++j)
		{
			if (robotAndLine(polySegs[i][j], robit))
			{
				return 0;
			}
		}
	}
	return 1;
}
/* **************************************** */
/* return 1 if c is  strictly left of ab; 0 otherwise */
int left (point2D a, point2D b, point2D c) {
    if (signed_area2D(a, b, c) > 0)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

//function that checks whether a segment blocks visibility to a point
int isVisible(point2D line1, point2D line2, point2D guard, point2D a)
{
	if (checkEqual(line1, line2, guard) || checkEqual(line1, line2, a) || (checkTwoPoints(a, guard))) 
	{
		return 1;
	}
	else if (left(line1, line2, guard) != (left(line1, line2, a)))
	{
		if (!left(guard, line1, a) && left(guard, line2, a))
		{
			return 0;
		}
		if (!left(guard, line2,a) && left(guard, line1, a))
		{
			return 0;
		}
	}
	return 1;
}

//function to check the intersection of two lines
//returns a points with an x and y value of -1 if there is no intersection
point2D pIntersect(point2D a, point2D b, point2D c, point2D d)
{
	point2D p;
	double s, t; 
	double num, denom;
	denom = a.x * (double)(d.y - c.y) +
		b.x * (double)(c.y - d.y) +
		d.x * (double)(b.y - a.y) +
		c.x * (double)(a.y - b.y);

	if (denom == 0)
	{
		point2D null;
		null.x = -1;
		null.y = -1;
	}
	num =   a.x * (d.y - c.y) +
		c.x * (a.y - d.y) +
		d.x * (c.y - a.y);
	s = num/denom;
	num = -(a.x * (c.y - b.y) + 
		b.x * (a.y - c.y) +
		c.x * (b.y - a.y));
	t = num / denom;
	p.x = a.x + s * (b.x - a.x);
	p.y = a.y + s * (b.y - a.y);
	if ((0.0 <= s) && (s<= 1.0) && (0.0 <= t) && (t <= 1.0))
	{
		return p;
	}
	else 
	{
		point2D null;
		null.x = -1; 
		null.y = -1; 
		return null;
	}
}

//function to check if the polygon is simple by checking if any of the segments intersect with any of the other segments
int isSimplePoly(vector<lineSegment2D> segs)
{
	int intBool = 1;
	for (int i = 0; i < segs.size(); ++i)
	{
		for (int j = 0; j < segs.size(); ++j)
		{
			if(i == j)
			{
				continue;
			}
			else
			{
				point2D intersection = pIntersect(segs[i].p1, segs[i].p2, segs[j].p1, segs[j].p2);
				if (intersection.x != -1) //there is an interseciton)
				{
					if(!checkTwoPoints(intersection, segs[i].p1) && !checkTwoPoints(intersection, segs[i].p2) &&
					   !checkTwoPoints(intersection, segs[j].p1) && !checkTwoPoints(intersection, segs[j].p2))
					{
						intBool = 0;
					}
				}
			}
		}
	}
	
	return intBool;
}
void updatePoints(robot * robit)
{
	double thetaRadians = ((double)robit->theta/180) * (M_PI);
	int distX = robit->distX;
	int distY = robit->distY;
	robit->b.x = robit->a.x + (distX * cos(thetaRadians));
	robit->b.y = robit->a.y + (distX * sin(thetaRadians));
	robit->c.x = robit->b.x - (distY * sin(thetaRadians));
	robit->c.y = robit->b.y + (distY * cos(thetaRadians));
	robit->d.x = robit->a.x - (distY * sin(thetaRadians));
	robit->d.y = robit->a.y + (distY * cos(thetaRadians));
} 
//function that checks if two points are equal 
int checkTwoPoints(point2D a, point2D b)
{
	int equal = 0;
	if (a.x == b.x && a.y == b.y)
	{	
		equal = 1;
	}
	return equal;
}

//function to check if the guard is inside the polygon
//returns an boolean int that indicates whether a point is inside a polygon
int inside(point2D check, vector<lineSegment2D> segs)
{
	int counter = 0;
	vector <point2D> points;
	for (int i = 0; i < segs.size(); i++)
	{
		points.push_back(segs[i].p1);
	}
	for (int i = 0; i < points.size(); i++)
	{
		if (points[i].y == check.y && points[i].x > check.x)
		{
			if (((points[i - 1].y > points[i].y) && (points[i + 1].y < points[i].y)) ||
			((points[i - 1].y < points[i].y) && (points[i + 1].y > points[i].y)))
			{
				counter += 1;
			}
		}
	}
	point2D outer;
	outer.x = check.x + 50000;
	outer.y = check.y;
	point2D inter;
	for (int i = 0; i < segs.size(); i++)
	{
		//Iterates through all the segments and checks for intersections
		inter = pIntersect(segs[i].p1, segs[i].p2, check, outer);	
		if (collinear(segs[i].p1, segs[i].p2, check))
		{
			if(( segs[i].p1.x >= check.x && segs[i].p2.x <= check.x) ||
			   (segs[i].p1.x <= check.x && segs[i].p2.x >= check.x))
			{
				return 0;
			
			}
		}
		if (inter.x != -1)
		{
		//If intersection with seg is not -1, -1 (i.e. exists), add to counter
			if (check.y !=  segs[i].p1.y && check.y != segs[i].p2.y)
			{
				counter += 1;
			}
		}
	}
	//Depending on counter return inside or outside
	if (counter % 2 == 0)
	{
		return 0;
	}
	return 1;
}

//set a to have the same values as b
void duprobit(robot* a, robot* b) 
{
	a->prev = b->prev;
	a->a.x = b->a.x;
	a->a.y = b->a.y;
	a->b.x = b->b.x;
        a->b.y = b->b.y;
	a->c.x = b->c.x;
        a->c.y = b->c.y;
	a->d.x = b->d.x;
        a->d.y = b->d.y;
	a->score = b->score;
	a->cost = b->cost;
	a->theta = b->theta;
	a->distX = b->distX;
	a->distY = b->distY;

}



int checkEqual(point2D a, point2D b, point2D c)
//Checks if three points are equal
{
	if ((a.x == b.x && a.y == b.y)||(a.x == c.x && a.y == c.y)||(b.x == c.x && b.y == c.y))
	{
		return 1;
	}
	return 0;
}



