#ifndef __geom_h
#define __geom_h
#include <vector>
using namespace std;
class point2D {
	public:
		double x, y, angle, distance;
		int ray;
};
class Triangle {
	public: point2D a, b, c;
};

typedef struct _lineSegment2D {
    point2D p1, p2;
} lineSegment2D;
 
typedef struct robot  {
	point2D a, b, c, d;
	robot * prev;
	bool operator< (const robot &other) const { return score < other.score; }
	double score;
	double cost;
	int theta;
	int distX, distY;
} robot;


vector <robot> returnPath();
void findPath(robot start, robot current, point2D end);
void createPath(robot * end, robot* start);
int checkFit(vector<vector<lineSegment2D> > polySegs, robot robit);
int robotAndLine(lineSegment2D line, robot robit);
void updatePoints(robot * robit);
vector<vector<vector<int> > > findFreeSpace(vector<vector<lineSegment2D> > polySegs, int X, int Y);
int checkSegInsidePolygon(vector <lineSegment2D> polygon, point2D a, point2D b);
double dist(point2D a, point2D b);
void updatePoints(robot* robit);
int isVisible(point2D line1, point2D line2, point2D guard, point2D a); 
int checkTwoPoints(point2D a, point2D b);
int checkEqual(point2D a, point2D b, point2D c);
vector <point2D> sortVisibleRadially (vector <point2D> points, point2D guard);
int collinear(point2D p, point2D q, point2D r);
int signed_area2D(point2D a, point2D b, point2D c);
int left (point2D a, point2D b, point2D c);
#endif

