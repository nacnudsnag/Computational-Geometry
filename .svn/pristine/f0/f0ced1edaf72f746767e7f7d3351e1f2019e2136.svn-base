#include "geom.h"
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <vector>

using namespace std; 



/* returns 2 times the signed area of triangle abc. The area is positive if c
   is to the left of ab, and negative if c is to the right of ab
 */
int signed_area3D(point3d a, point3d b, point3d c, point3d d) {
	int x; //calculate the cross products x, y, and z components
	int y; //components of the normal line to plane
	int z;
	int abvectorx = b.x - a.x; //calculate ab and ac vector	
	int abvectory = b.y - a.y;
	int abvectorz = b.z - a.z;
	int acvectorx = c.x - a.x;
	int acvectory = c.y - a.y;
	int acvectorz = c.z - a.z;
	x = (abvectory*acvectorz) - (abvectorz*acvectory);
	y = (abvectorz*acvectorx) - (abvectorx*acvectorz);
	z = (abvectorx*acvectory) - (abvectory*acvectorx);
	//want to determine equation for plane through a, b, c
	//then, plug points d into plane equation, if positive, d is to left
	//if negative, d is to right
	//plane equation is x(x-x1) + y(y-y1) + z(z-z1) = 0
	//plugging in point x,y,z will give zero if one plane
	//	will give a positive number if to right
	//	will give a negative number if to left
	int signedarea;
	signedarea = x*(d.x - a.x) + y*(d.y - a.y) + z*(d.z - a.z);
 	return signedarea; 
}

/* return 1 if p,q,r, t on same plane, and 0 otherwise */
int collinear(point3d p, point3d q, point3d r, point3d t) {
  if (signed_area3D(p,q,r,t) == 0) {
	return 1;
  }
  return 0; 
}


/* return 1 if d is  strictly left of abc; 0 otherwise */
int left (point3d a, point3d b, point3d c, point3d d) {
	if (signed_area3D(a, b, c, d) < 0) 
	{
		return 1;
	} else {return 0;}
}


/* compute and return the convex hull of the points */
vector<triangle3d> brute_force_hull(vector<point3d> points) {
  
  vector<triangle3d> result; 
  for (int i = 0; i < points.size(); i++ )
  {
	for (int j = i; j < points.size(); j++)
	{
		for (int k = j; k < points.size(); k++)
		{
			int toAdd = 1;
			for (int l = 0; l < points.size(); l++)
			{	
				//want to check if all points are left of--add if colinear or all points left of
				if (left(points[i], points[j], points[k], points[l])&&!collinear(points[i], points[j], points[k], points[l]))
				{
					toAdd = 0;
				}
			}
			if (toAdd==1) {
				triangle3d triangleAdd;
				triangleAdd.a = &points[i];
				triangleAdd.b = &points[j];
				triangleAdd.c = &points[k];
				result.push_back(triangleAdd);
			}
			else 
			{
				int toAdd = 1;
				for (int l = 0; l < points.size(); l++)
				{	
					//otherwise, we want to check if all other points are right of (not colinear because we already check that) 
					//and if all points are to the right of, we also want to add the triangle to the hull
					//The reasoning for this is that the return of leftof depends on the ordering of the arguments
					//we get around this by checking if everything is either all left of or all right of
					if (!left(points[i], points[j], points[k], points[l])&&!collinear(points[i], points[j], points[k], points[l]))
					{
						toAdd = 0;
					}
				}
				if (toAdd==1) {
				triangle3d triangleAdd;
				triangleAdd.a = &points[i];
				triangleAdd.b = &points[j];
				triangleAdd.c = &points[k];
				result.push_back(triangleAdd);
			}
				
			}	
			
		}
	}
  }
  return result; 
}

