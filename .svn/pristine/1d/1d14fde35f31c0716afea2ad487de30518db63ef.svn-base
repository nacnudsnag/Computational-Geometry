#include "geom.h"

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <assert.h>
#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

point2D pIntersect(point2D a, point2D b, point2D c, point2D d);
double bestDist = INT_MAX;
vector <robot> path;
vector <robot> heap;
robot endRobot;
int fits = 1; 
int firstRound = 1;
int completed = 0;
vector <point2D> points;

vector<vector<vector<double> > > bestScore(501, vector<vector<double> >(501, vector<double>(36))) ;
vector<vector<vector<int> > > willItFit(501, vector<vector<int> >(501, vector<int>(36))) ; 
//vector that stores whether the robot can fit at any particular cooordinate in the window
					 

double dist(point2D a, point2D b)
{       
	//Computes distance between Points
        return sqrt(pow(a.x - b.x, 2) + pow(a.y - b.y, 2));
}

int signed_area2D(point2D a, point2D b, point2D c) {
    //return ((b.x - a.x)*(c.y - a.y) - (b.y - a.y)*(c.x - a.x));
    return ((a.x-c.x)*(b.y-c.y) - (b.x-c.x) * (a.y-c.y));
}

/* **************************************** */
/* return 1 if p,q,r collinear, and 0 otherwise */
int collinear(point2D p, point2D q, point2D r) {
    if (signed_area2D(p, q, r) ==0)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
//Function that takes a robot and a line, and sees if the robot intersects with the line
//Returns 1 if there is an intersection, and a 0 if no intersections
int robotAndLine(lineSegment2D line, robot robit)
{
	if (pIntersect(line.p1, line.p2, robit.a, robit.b).x != -1)
	{
		return 1;
	}
	if (pIntersect(line.p1, line.p2, robit.b, robit.c).x != -1)
        {
                return 1;
        }
	if (pIntersect(line.p1, line.p2, robit.c, robit.d).x != -1)
        {
                return 1;
        }
	if (pIntersect(line.p1, line.p2, robit.d, robit.a).x != -1)
        {
                return 1;
        }
	return 0;
}
//function that takes a robot struct and deteremines if a robot fits at a particular coordinate
//returns an int: 1 if the robot fits, 0 if it does not fit
int checkFit(vector<vector<lineSegment2D> > polySegs, robot robit) 
{
	for (int i = 0; i < polySegs.size(); ++i)
	{
		for (int j = 0; j < polySegs[i].size(); ++j)
		{
			if (robotAndLine(polySegs[i][j], robit))
			{
				return 0;
			}
		}
	}
	return 1;
}
/* **************************************** */
/* return 1 if c is  strictly left of ab; 0 otherwise */
int left (point2D a, point2D b, point2D c) {
    if (signed_area2D(a, b, c) > 0)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

//function that checks whether a segment blocks visibility to a point
int isVisible(point2D line1, point2D line2, point2D guard, point2D a)
{
	if (checkEqual(line1, line2, guard) || checkEqual(line1, line2, a) || (checkTwoPoints(a, guard))) 
	{
		return 1;
	}
	else if (left(line1, line2, guard) != (left(line1, line2, a)))
	{
		if (!left(guard, line1, a) && left(guard, line2, a))
		{
			return 0;
		}
		if (!left(guard, line2,a) && left(guard, line1, a))
		{
			return 0;
		}
	}
	return 1;
}

//function to check the intersection of two lines
//returns a points with an x and y value of -1 if there is no intersection
point2D pIntersect(point2D a, point2D b, point2D c, point2D d)
{
	point2D p;
	double s, t; 
	double num, denom;
	denom = a.x * (double)(d.y - c.y) +
		b.x * (double)(c.y - d.y) +
		d.x * (double)(b.y - a.y) +
		c.x * (double)(a.y - b.y);

	if (denom == 0)
	{
		point2D null;
		null.x = -1;
		null.y = -1;
	}
	num =   a.x * (d.y - c.y) +
		c.x * (a.y - d.y) +
		d.x * (c.y - a.y);
	s = num/denom;
	num = -(a.x * (c.y - b.y) + 
		b.x * (a.y - c.y) +
		c.x * (b.y - a.y));
	t = num / denom;
	p.x = a.x + s * (b.x - a.x);
	p.y = a.y + s * (b.y - a.y);
	if ((0.0 <= s) && (s<= 1.0) && (0.0 <= t) && (t <= 1.0))
	{
		return p;
	}
	else 
	{
		point2D null;
		null.x = -1; 
		null.y = -1; 
		return null;
	}
}

//function to check if the polygon is simple by checking if any of the segments intersect with any of the other segments
int isSimplePoly(vector<lineSegment2D> segs)
{
	int intBool = 1;
	for (int i = 0; i < segs.size(); ++i)
	{
		for (int j = 0; j < segs.size(); ++j)
		{
			if(i == j)
			{
				continue;
			}
			else
			{
				point2D intersection = pIntersect(segs[i].p1, segs[i].p2, segs[j].p1, segs[j].p2);
				if (intersection.x != -1) //there is an interseciton)
				{
					if(!checkTwoPoints(intersection, segs[i].p1) && !checkTwoPoints(intersection, segs[i].p2) &&
					   !checkTwoPoints(intersection, segs[j].p1) && !checkTwoPoints(intersection, segs[j].p2))
					{
						intBool = 0;
					}
				}
			}
		}
	}
	
	return intBool;
}
void updatePoints(robot * robit)
{
	point2D helper;
	double thetaRadians = ((double)robit->theta/180) * (M_PI);
	int distX = robit->distX;
	int distY = robit->distY;
	robit->b.x = robit->a.x + (distX * cos(thetaRadians));
	robit->b.y = robit->a.y + (distX * sin(thetaRadians));
	robit->c.x = robit->b.x - (distY * sin(thetaRadians));
	robit->c.y = robit->b.y + (distY * cos(thetaRadians));
	robit->d.x = robit->a.x - (distY * sin(thetaRadians));
	robit->d.y = robit->a.y + (distY * cos(thetaRadians));
} 
//function that checks if two points are equal 
int checkTwoPoints(point2D a, point2D b)
{
	int equal = 0;
	if (a.x == b.x && a.y == b.y)
	{	
		equal = 1;
	}
	return equal;
}

//function to check if the guard is inside the polygon
//returns an boolean int that indicates whether a point is inside a polygon
int inside(point2D check, vector<lineSegment2D> segs)
{
	int counter = 0;
	vector <point2D> points;
	for (int i = 0; i < segs.size(); i++)
	{
		points.push_back(segs[i].p1);
	}
	for (int i = 0; i < points.size(); i++)
	{
		if (points[i].y == check.y && points[i].x > check.x)
		{
			if (((points[i - 1].y > points[i].y) && (points[i + 1].y < points[i].y)) ||
			((points[i - 1].y < points[i].y) && (points[i + 1].y > points[i].y)))
			{
				counter += 1;
			}
		}
	}
	point2D outer;
	outer.x = check.x + 50000;
	outer.y = check.y;
	point2D inter;
	for (int i = 0; i < segs.size(); i++)
	{
		//Iterates through all the segments and checks for intersections
		inter = pIntersect(segs[i].p1, segs[i].p2, check, outer);	
		if (collinear(segs[i].p1, segs[i].p2, check))
		{
			if(( segs[i].p1.x >= check.x && segs[i].p2.x <= check.x) ||
			   (segs[i].p1.x <= check.x && segs[i].p2.x >= check.x))
			{
				return 0;
			
			}
		}
		if (inter.x != -1)
		{
		//If intersection with seg is not -1, -1 (i.e. exists), add to counter
			if (check.y !=  segs[i].p1.y && check.y != segs[i].p2.y)
			{
				counter += 1;
			}
		}
	}
	//Depending on counter return inside or outside
	if (counter % 2 == 0)
	{
		return 0;
	}
	return 1;
}


vector<vector<vector<int> > > findFreeSpace(vector<vector<lineSegment2D> > polySegs, int X, int Y)
{
	robot testRobot;
	testRobot.distX = X;
	testRobot.distY = Y;
	point2D a;
	for (int i = 0; i <= 500; i+=5)
	{
		for (int j = 0; j <= 500; j+=5)
		{
			for (int angle = 0; angle < 360; angle+= 10)
			{
				testRobot.a.x = i;
				testRobot.a.y = j;
				testRobot.theta = angle;
				updatePoints(&testRobot);
				if (checkFit(polySegs, testRobot))
				{
					willItFit[i][j][angle/10] = 1;
				}
				else
				{
					willItFit[i][j][angle/10] = 0;
				}
			}
		}
	}
	return willItFit;
}
void initalizeScores()
{
	for (int i = 0; i <= 500; i += 5)
        {
                for (int j = 0; j <= 500; j += 5)
                {
                        for (int angle = 0; angle < 360; angle+= 10)
                        {
				bestScore[i][j][angle] = INT_MAX;
			}
		}
	}
}	
void createPath(robot * end, robot* start)
{
	if (!checkTwoPoints(end->a, start->a) && end->a.x > 1)
	{
		cout << end->a.x << ", " << end->a.y << endl;
		path.push_back(*end);
		createPath(end->prev, start);
	}
}
vector <robot> returnPath() { return path;}
void findPath(robot start, robot current, point2D end)
{
	if (completed)
	{
		return;
	}
	bestScore[current.a.x][current.a.y][current.theta] = current.score;
	if (firstRound)
	{
		initalizeScores();
		firstRound = 0;
	}
	if (checkTwoPoints(start.a, current.a))
	{
		make_heap(heap.begin(), heap.end());
		heap.push_back(current);
		push_heap(heap.begin(), heap.end());
		pop_heap (heap.begin(),heap.end());
                heap.pop_back();
	}
	if (checkTwoPoints(current.a, end))
	{
		cout << "Found It" << endl;
		bestDist = current.score;
		endRobot = current;
	}
	robot addRobot;
	addRobot.distX = start.distX;
	addRobot.distY = start.distY;
	//cout << "cx: " << current.a.x << "y: " << current.a.y << endl;
	
	for (int i = -5; i <= 5; i += 5)
	{
		for (int j = -5; j <= 5; j+= 5) //change to defined constants 
		{
                        addRobot.a.x = current.a.x + i;
                        addRobot.a.y = current.a.y + j;
                        addRobot.cost = current.cost + dist(addRobot.a, current.a);
                        addRobot.score = addRobot.cost + dist(addRobot.a, end);
			if (bestScore[current.a.x + i][current.a.y + j][current.theta] > addRobot.score && 
			willItFit[current.a.x + i][current.a.y + j][current.theta] == 1
			&& !(i == 0 && j == 0) && addRobot.score < bestDist)
			{
				addRobot.theta = current.theta;
				addRobot.prev = &current;
                        	updatePoints(&addRobot);
				heap.push_back(addRobot); 
				push_heap (heap.begin(),heap.end());
			}
		}
	}
	while (heap.size() > 0)
	{
		sort_heap(heap.begin(), heap.end());
		//cout << "Size in Loop: " << heap.size() << endl;
		pop_heap (heap.begin(),heap.end());
		addRobot = heap.back();
		//cout << heap.back().a.x << ", " << heap.back().a.y << endl;
                heap.pop_back();
		if (bestScore[addRobot.a.x][addRobot.a.y][addRobot.theta] > addRobot.score)
		{
			//cout << "Doing it!" << endl;
			findPath(start, addRobot, end);
		}
		
	}
	if (heap.size() == 0)
	{
		if (bestDist > INT_MAX - 1)
		{
			completed = 1;
			cout << "No Path" << endl;
		}
		if (!completed && checkTwoPoints(current.a, start.a))
		{
			path.clear();
			createPath(&endRobot, &start);
			completed = 1;
		}
	}
	return;
}

int checkEqual(point2D a, point2D b, point2D c)
//Checks if three points are equal
{
	if ((a.x == b.x && a.y == b.y)||(a.x == c.x && a.y == c.y)||(b.x == c.x && b.y == c.y))
	{
		return 1;
	}
	return 0;
}



